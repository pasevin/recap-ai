#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

echo "🔍 Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
  echo "${BLUE}[PRE-COMMIT]${NC} $1"
}

print_success() {
  echo "${GREEN}✅ $1${NC}"
}

print_warning() {
  echo "${YELLOW}⚠️  $1${NC}"
}

print_error() {
  echo "${RED}❌ $1${NC}"
}

# Track if we had any failures
FAILED=0

print_status "Step 1: Running Prettier formatting..."
if bun run format; then
  print_success "Code formatting completed"
else
  print_warning "Prettier formatting had issues (continuing anyway)"
fi

print_status "Step 2: Running TypeScript build checks..."
if bun run build:check; then
  print_success "TypeScript compilation checks passed"
else
  print_error "TypeScript compilation failed"
  FAILED=1
fi

print_status "Step 3: Running ESLint for critical issues..."
# Check for critical errors only (ignore warnings for gradual improvement)
if bun run lint --quiet 2>/dev/null; then
  print_success "No critical ESLint errors found"
else
  print_error "Critical ESLint errors found (must fix)"
  bun run lint 2>&1 | grep -E "(error|Error)" || true
  FAILED=1
fi

print_status "Step 4: Running basic tests..."
if bun run test:cli 2>/dev/null; then
  print_success "Basic tests passed"
else
  print_warning "Some tests failed (allowing commit but consider fixing)"
  # Don't fail the commit for test failures, just warn
fi

# Auto-stage any formatting changes
git add . 2>/dev/null || true

# Final result
if [ $FAILED -eq 1 ]; then
  print_error "Pre-commit checks failed. Please fix the critical issues above."
  exit 1
else
  print_success "Pre-commit checks passed! 🚀"
  exit 0
fi
